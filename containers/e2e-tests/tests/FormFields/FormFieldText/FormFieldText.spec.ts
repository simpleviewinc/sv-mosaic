import type { Page } from "@playwright/test";
import { test, expect } from "@playwright/test";
import { FormFieldTextPage } from "../../../pages/FormFields/FormFieldText/FormFieldTextPage";
import theme from "@simpleview/sv-mosaic/theme";;

test.describe("FormFields - FormFieldsText - Kitchen Sink", () => {
	let page: Page;
	let ffTextPage: FormFieldTextPage;

	test.beforeAll(async ({ browser }) => {
		page = await browser.newPage();
		ffTextPage = new FormFieldTextPage(page);
	});

	test.beforeEach(async() => {
		await ffTextPage.visit(ffTextPage.page_path);
	});

	test("Validate Regular Text field", async () => {
		expect(await ffTextPage.regularTextField.getAttribute("type")).toBe("text");
	});

	test("Validate that the provided text is saved when submitted.", async () => {
		page.once("dialog", async dialog => {
			const message = dialog.message().split(/[{}]/)[1].split(/[\n":]/).map(el => el.trim()).filter(el => el !== "");
			expect(message[1]).toBe(sampleText);
			await dialog.dismiss();
		});
		const sampleText = "regular example text";
		await ffTextPage.regularTextField.type(sampleText);
		await ffTextPage.saveBtn.click();
	});

	test("Validate Regular Text field type.", async () => {
		expect(await ffTextPage.passwordTextField.getAttribute("type")).toBe("Password");
	});

	test("Validate Regular Password field.", async () => {
		const randomPassword = await ffTextPage.getAutogeneratedText(20);
		await ffTextPage.passwordTextField.type(randomPassword);
		expect(await ffTextPage.passwordTextField.inputValue()).toBe(randomPassword);
	});

	test("Validate that the provided password is saved when submitted.", async ({ page }) => {
		page.once("dialog", async dialog => {
			const message = dialog.message().split(/[{}]/)[1].split(/[\n":]/).map(el => el.trim()).filter(el => el !== "");
			expect(Number(message[1])).toBe(randomPassword);
			await dialog.dismiss();
		});
		const randomPassword = await ffTextPage.getAutogeneratedText(20);
		await ffTextPage.passwordTextField.type(randomPassword);
		await ffTextPage.saveBtn.click();
	});

	test("Validate Multiline field", async () => {
		const sampleString = "Multiline string text";
		await ffTextPage.setTextInMultilineField(sampleString);
		const expectedResult = "Multiline\nstring\ntext\n";
		expect(await ffTextPage.multilineTextField.inputValue()).toBe(expectedResult);
	});

	test("Validate field with an icon", async () => {
		await ffTextPage.fieldWithIconIcon.waitFor({ state: "visible" });
		await expect(ffTextPage.fieldWithIconIcon).toBeVisible();
		await expect(ffTextPage.fieldWithIconTextField).toBeVisible();
		const sampleText = "With an icon text";
		await ffTextPage.fieldWithIconTextField.type(sampleText);
		expect(await ffTextPage.fieldWithIconTextField.inputValue()).toBe(sampleText);
	});

	test("Validate xs regular text size is valid", async () => {
		page.pause();
		expect(await ffTextPage.getElementWidth(ffTextPage.xsSizeTextField, true)).toBe(100);
	});

	test("Validate sm regular text size is valid", async () => {
		expect(await ffTextPage.getElementWidth(ffTextPage.smSizeTextField, true)).toBe(280);
	});

	test("Validate md regular text size is valid", async () => {
		expect(await ffTextPage.getElementWidth(ffTextPage.mdSizeTextField, true)).toBe(450);
	});

	test("Validate lg regular text size is valid", async () => {
		expect(await ffTextPage.getElementWidth(ffTextPage.lgSizeTextField, true)).toBe(620);
	});

	test("Validate that an empty value is saved correctly.", async () => {
		const sampleText = "regular example text";
		await ffTextPage.regularTextField.type(sampleText);
		await ffTextPage.saveBtn.click();
		await ffTextPage.clearAllValuesFromField(ffTextPage.regularTextField);
		await ffTextPage.saveBtn.click();
		page.once("dialog", async dialog => {
			expect(dialog.message()).toContain("Form submitted with the following data: {}");
			await dialog.accept();
		});
	});

	test("Validate that the Multiline field has correct height.", async () => {
		test.skip();
		expect(await ffTextPage.getHeightFromElement(ffTextPage.multilineTextField)).toBe(theme.fieldSpecs.inputText.height);
	});
});
