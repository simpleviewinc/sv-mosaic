import{j as t}from"./jsx-runtime-nGUw9YhZ.js";import{useMDXComponents as r}from"./index-3-_tf5dF.js";import{M as i,C as s}from"./index-BbAFHYha.js";import{s as l,P as a}from"./Content.stories-iDuKhpps.js";import"./index-BP8_t0zE.js";import"./iframe-CjjOpcna.js";import"../sb-preview/runtime.js";import"./index-BxmsGmlx.js";import"./extends-CF3RwP-h.js";import"./tslib.es6-CRos2fHm.js";import"./index-DXimoRZY.js";import"./inheritsLoose-CMy1E8oj.js";import"./toString-BjCnz-8e.js";import"./index-DJqTsaQd.js";import"./index-DrFu-skq.js";import"./column_transforms-CyX7y3_5.js";import"./CheckboxList-BTpJVlmR.js";import"./isSymbol-CEVJpixJ.js";import"./Checkbox-Q9UDhbdf.js";import"./theme-DRtZtbPc.js";import"./FormControlLabel-n1qioM9o.js";import"./generateUtilityClasses-DAcHHM0W.js";import"./formControlState-D52vkf9K.js";import"./ButtonBase-BZmvw3BH.js";import"./useIsFocusVisible-De2ftVE9.js";import"./useControlled-im5M3O13.js";import"./getThemeProps-Cs15h2IA.js";import"./useTheme-5hcycNQy.js";import"./createSvgIcon-CPgMIgId.js";import"./testIds-DZf96GK8.js";import"./ColorSelected-HjDSMxjB.js";import"./index-DRdTCjFK.js";import"./debounce-DO3dP4oK.js";import"./DataViewPrimaryFilter.styled-CylNlUs-.js";import"./createSvgIcon-CcHL1II5.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-DvT1GKkC.js";import"./useId-DLncWxdO.js";import"./Chip-DoaLK3Y8.js";import"./useMosaicTranslation-CZCb37QS.js";import"./FormFieldText.styled-BhoqJBjr.js";import"./Button-Do5OxnZO.js";import"./Popper-CPbWUqAP.js";import"./useToggle-lipGlewK.js";import"./ButtonRow-DWtIszZP.js";import"./Spinner-DgupAfKo.js";import"./Typography-Br_RMLnS.js";import"./SubtitleText-Vdwjg1jD.js";import"./TitleWrapper-D2l-_w9e.js";import"./containerQuery-C0QVV4Kt.js";import"./TitleText-C9TlfF_O.js";import"./MoreVert-BbmWEP2K.js";import"./ChevronRight-CSz705Z0.js";import"./PageHeader-BRjQFO47.js";import"./Image-DW9YTXUC.js";import"./formats-sBod7wm8.js";import"./TooltipIcon-CO3K7ssQ.js";import"./Edit-hiJ2yy-Y.js";import"./styled-hJgfyZIG.js";import"./emotion-unitless.esm-sScrWPmR.js";import"./createSvgIcon-DE5yaevU.js";import"./Typography-aSbaE-Qi.js";function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...r(),...e.components};return t.jsxs(t.Fragment,{children:[t.jsx(i,{of:l}),`
`,t.jsx(n.h1,{id:"content",children:"Content"}),`
`,t.jsxs(n.p,{children:["The ",t.jsx(n.code,{children:"Content"})," helps to show the primary information from each specific record, with the possibility to add new subsections separate from the main form."]}),`
`,t.jsx(n.h2,{id:"props",children:"Props"}),`
`,t.jsx(n.p,{children:t.jsx(n.a,{href:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/Content/ContentTypes.ts",rel:"nofollow",children:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/Content/ContentTypes.ts"})}),`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"fields"})," - ",t.jsx(n.code,{children:"array"})," of ",t.jsx(n.code,{children:"object"})," required - List of the definitions of the fields that will be render.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"name"})," - ",t.jsx(n.code,{children:"string"})," required - The name of the field is used to check if is valid compared with the names on the sections."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"label"})," - ",t.jsx(n.code,{children:"string"})," required - Label that is render above the component generated by the transforms functions."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"transforms"})," - ",t.jsx(n.code,{children:"(args: DataViewColumnTransformArgs<T>): ReactNode"})," optional - Functions which will receive raw data that will be use to render a component.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"DataViewColumnTransformArgs"})," - ",t.jsx(n.code,{children:"string"})," optional.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"data"})," - ",t.jsx(n.code,{children:"T"})," required - The data that the getValues function is going to resolve. This is value is used to generate the returned JSX element, it could be seen as a prop."]}),`
`]}),`
`]}),`
`]}),`
`]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"show"})," - ",t.jsx(n.a,{href:"/docs/components-form-readme--page#MosaicToggle-t-type",children:t.jsx(n.code,{children:"MosaicToggle"})})," optional - No params are given to the show callback"]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"column"})," - ",t.jsx(n.code,{children:"string"})," optional - If a column is given then it will be used as the name hence, defaults to name."]}),`
`]}),`
`]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"data"})," - ",t.jsx(n.code,{children:"MosaicObject"})," required - Data that will be used by the transform function of each field to generate the corresponding JSX element."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"sections"})," - ",t.jsx(n.code,{children:"MosaicGridConfig"})," optional - Defines the position of each field. It is based in columns with a maximun allowed of two, if no sections are passed the content will be render in one column. Look at the following example to see how it is declared."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"title"})," - ",t.jsx(n.code,{children:"string"})," required - Name of the section or subsection."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"buttons"})," - ",t.jsx(n.code,{children:"ButtonProps[]"})," optional - Array of buttons that will be display on the top-right corner of the component."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"variant"})," - ",t.jsx(n.code,{children:'"standard" | "card"'}),' optional - Variant of the component defines what styles should render. If "card" is passed, content component looks like a card component']}),`
`]}),`
`,t.jsx(n.h3,{id:"example",children:"Example"}),`
`,t.jsx(n.pre,{children:t.jsx(n.code,{className:"language-ts",children:`import {
	transform_chips,
	transform_colorPicker,
	transform_dateFormat,
	transform_thumbnail,
	transform_boolean
} from "@root/transforms/column_transforms";

const fieldDef = [
	{
		name: "chips",
		label: "Chips using transform_chips()",
		transforms: [transform_chips()],
		column: "tags",
		show: [true, () => true]
	},
	{
		name: "toggle",
		label: "Toggle using transform_boolean()",
		transforms: [transform_boolean()],
	},
	{
		name: "date",
		label: "Date using transform_dateFormat()",
		transforms: [transform_dateFormat()],
	},
	{
		name: "color",
		label: "Color using transfomr_colorPicker()",
		transforms: [transform_colorPicker()],
		column: "colorPicker"
	},
	{
		name: "thumbnail",
		label: "Thumbnail using transform_thumbnail()",
		transforms: [transform_thumbnail({ width: 150, height: 150 })],
	},
];

// Sections with two columns defined
const sections = [
	[["tags"], ["colorPicker"]],
	[["toggle"], ["date"]],
	[["thumbnail"]],
];

// Values resolved by the getValues function.
const values = {
	tags: [
		{
			label: "Chip 1",
			value: "chip-1",
		},
		{
			label: "Chip 2",
			value: "chip-2",
		},
		{
			label: "Chip 3",
			value: "chip-3",
		},
		{
			label: "Chip 4",
			value: "chip-4",
		},
	],
	date: new Date("December 17, 1995 03:24:00"),
	toggle: false,
	colorPicker: "#a8001791",
	thumbnail: "https://res.cloudinary.com/simpleview/image/upload/v1542821844/clients/grandrapids/_OD_0354_c78fbb66-c75a-4804-9430-9af38ed8e9d5.jpg"
};

const ContentExample = (): ReactElement => {
	/**
	 * Simulates a DB calls that fetch the values for
	 * each field.
	 * @returns the resolved values
	 */
	const getValues = async (): Promise<MosaicObject> => {
		return new Promise((resolve) => {
			setTimeout(() => {
					resolve(values);
			}, 500);
		});
	};

	return (
		<Content
			title={title}
			getValues={getValues}
			fieldDef={fieldDef}
			sections={sections}
			variant={"card"}
			onEdit={() => {/**Edit functionality*/}}
			onAdd={() => {/**Add functionality*/}}
		/>
	);
};
`})}),`
`,t.jsx(n.h2,{id:"playground",children:"Playground"}),`
`,t.jsx(s,{of:a})]})}function xt(e={}){const{wrapper:n}={...r(),...e.components};return n?t.jsx(n,{...e,children:t.jsx(o,{...e})}):o(e)}export{xt as default};
