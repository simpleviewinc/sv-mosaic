import{j as e}from"./jsx-runtime-nGUw9YhZ.js";import{useMDXComponents as s}from"./index-3-_tf5dF.js";import{M as r}from"./index-C9HXjlyM.js";import{s as o}from"./DataView.stories-11qFwW12.js";import"./index-BP8_t0zE.js";import"./iframe-D7nd24S1.js";import"../sb-preview/runtime.js";import"./index-BxmsGmlx.js";import"./extends-CF3RwP-h.js";import"./tslib.es6-CRos2fHm.js";import"./index-DXimoRZY.js";import"./inheritsLoose-CMy1E8oj.js";import"./toString-BjCnz-8e.js";import"./index-DJqTsaQd.js";import"./index-DrFu-skq.js";import"./uniqueId-BPI7foNJ.js";import"./styled-components.browser.esm-8MQ3dTkk.js";import"./emotion-unitless.esm-sScrWPmR.js";import"./Add-DakDrsh-.js";import"./styled-hJgfyZIG.js";import"./createSvgIcon-DE5yaevU.js";import"./Create-CpnV7q0W.js";import"./Delete-Bd9yuHmM.js";import"./MultiSelectHelper-D07F4Tgg.js";import"./CheckboxList-DIJA1CoI.js";import"./isSymbol-CEVJpixJ.js";import"./Checkbox-DXmlIxMz.js";import"./theme-DRtZtbPc.js";import"./FormControlLabel-n1qioM9o.js";import"./generateUtilityClasses-DAcHHM0W.js";import"./formControlState-D52vkf9K.js";import"./ButtonBase-BZmvw3BH.js";import"./useIsFocusVisible-De2ftVE9.js";import"./useControlled-im5M3O13.js";import"./getThemeProps-Cs15h2IA.js";import"./useTheme-5hcycNQy.js";import"./createSvgIcon-CPgMIgId.js";import"./testIds-wFnuQL-c.js";import"./index-OJVcpMHx.js";import"./debounce-DO3dP4oK.js";import"./DataViewPrimaryFilter.styled-CylNlUs-.js";import"./createSvgIcon-CcHL1II5.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-DvT1GKkC.js";import"./useId-DLncWxdO.js";import"./Chip-B85GZ6Ow.js";import"./useMosaicTranslation-CZCb37QS.js";import"./FormFieldText.styled-BceLEoIp.js";import"./Button-Do5OxnZO.js";import"./Popper-CPbWUqAP.js";import"./useToggle-lipGlewK.js";import"./ButtonRow-CuiV6DQ9.js";import"./Spinner-DgupAfKo.js";import"./Typography-Br_RMLnS.js";import"./SubtitleText-Vdwjg1jD.js";import"./ColorSelected-BvcxNARU.js";import"./TitleWrapper-D2l-_w9e.js";import"./containerQuery-C0QVV4Kt.js";import"./TitleText-C9TlfF_O.js";import"./MoreVert-BbmWEP2K.js";import"./ChevronRight-CSz705Z0.js";import"./PageHeader-DvPTRq5b.js";import"./index-BhxOpqnJ.js";import"./Form-BwRej2O0.js";import"./SideNav-D66jd1x5.js";import"./sizes-C6oSOElx.js";import"./RadioButton-CO2cFro8.js";import"./StyledFormControl.styled-BHyCFBbY.js";import"./Toggle-BRgaiAVD.js";import"./formats-sBod7wm8.js";import"./Dialog-DXK7hw4q.js";import"./useMediaQuery-CguehUMS.js";import"./Snackbar-J6gNQC5v.js";import"./Close-Dlpx7KpR.js";import"./ClickAwayListener-DnjBLK-5.js";import"./TooltipIcon-CO3K7ssQ.js";import"./DataViewPrimaryFilter-BY7RwnGl.js";import"./DataViewFilterSingleSelect-BnogSr3q.js";import"./DataViewFilterText-DW38oxIB.js";import"./useMosaicSettings-BhwODcT2.js";import"./column_transforms-K4x0P-PI.js";import"./Image-DW9YTXUC.js";import"./DataViewFilterNumber-Dq67Bj0P.js";import"./DataViewFilterMultiselect-BC8Lcg8Q.js";function t(n){const i={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...s(),...n.components};return e.jsxs(e.Fragment,{children:[e.jsx(r,{of:o}),`
`,e.jsx(i.h1,{id:"dataview",children:"DataView"}),`
`,e.jsxs(i.p,{children:["A ",e.jsx(i.code,{children:"DataView"})," is used to output a list or grid of items. It can support a whole variety of actions including primary actions, additional actions and bulk actions."]}),`
`,e.jsx(i.h2,{id:"props",children:"Props"}),`
`,e.jsx(i.p,{children:"The component has not fully been converted to Typescript, the converted props can be found at:"}),`
`,e.jsxs(i.p,{children:["DataViewProps - ",e.jsx(i.a,{href:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/DataView/DataViewTypes.ts",rel:"nofollow",children:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/DataView/DataViewTypes.ts"})]}),`
`,e.jsx(i.p,{children:"The other non-converted props are listed below:"}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"title"})," -  ",e.jsx(i.code,{children:"string"})," - The title of the DataView."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"data"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"object"})," - The data that should populate the list view. This prop should be populated based on the ",e.jsx(i.code,{children:"filter"}),", ",e.jsx(i.code,{children:"sort"}),", ",e.jsx(i.code,{children:"limit"}),", and ",e.jsx(i.code,{children:"skip"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"filters"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"object"})," - The primary and optional ",e.jsx(i.code,{children:"Filters"})," which will be available in the ",e.jsx(i.code,{children:"DataView"}),".",`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"name"})," - ",e.jsx(i.code,{children:"string"})," required - A unique name used to identify the filter."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"label"})," - ",e.jsx(i.code,{children:"string"})," required - A label to display for the user interacting with the filter."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"component"})," - ",e.jsx(i.code,{children:"jsx component"})," required - A jsx component which handles the type of filter rendered.",`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"DataViewFilterText"})," - A text filter with comparisons which allows the user to specify filter text."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"DataViewMultiselect"})," - A list of options with comparisons which allows the user to select one or more values from the list."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"DataViewFilterDate"})," - A calendar picker which allows the user to select a date range."]}),`
`]}),`
`]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"type"})," - ",e.jsx(i.code,{children:"string"}),' enum ["primary", "optional"] required - Indicates whether the component is displayed on the DataView or hidden under the addtional filters.']}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onChange"})," - ",e.jsx(i.code,{children:"function"})," required - A function which handles a the value of the filter changing."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"args"})," - ",e.jsx(i.code,{children:"object"})," - An object detailing arguments to be passed into the jsx component."]}),`
`]}),`
`]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"checked"})," - ",e.jsx(i.code,{children:"boolean[]"})," -  Array containing the rows that are going to be checked."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"checkedAllPages"})," - ",e.jsx(i.code,{children:"boolean[]"})," -  Defines whether all pages are checked or not."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"noResults"})," - ",e.jsx(i.code,{children:"ReactElement | string"})," - When there are no results to show in the data view, this component will be displayed. If omitted, a generic message ",e.jsx(i.code,{children:'"No results were found."'})," will be displayed instead."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"filter"})," - ",e.jsx(i.code,{children:"object"})," - An object representing the total filtering logic applied to data in the ",e.jsx(i.code,{children:"DataView"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"activeFilters"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"string"})," - List of filter names from the filters array which are active in the ",e.jsx(i.code,{children:"DataView"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"activeColumns"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"string"})," - List of column names from the columns array which are displayed in the ",e.jsx(i.code,{children:"DataView"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"buttons"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"object"})," - A group of ",e.jsx(i.code,{children:"Buttons"})," which will be displayed at the top of the ",e.jsx(i.code,{children:"DataView"})," to the side of the ",e.jsx(i.code,{children:"DataView"})," title."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"display"})," - ",e.jsx(i.code,{children:"string"})," - enum ",e.jsx(i.code,{children:"list"}),", ",e.jsx(i.code,{children:"grid"})," - What type of view should be utilized."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"displayOptions"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"object"})," - A list of saved views to be provided as options in the saved view switcher."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"count"})," - ",e.jsx(i.code,{children:"number"})," - The number of items from the data key which match the current filter."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"sort"})," - ",e.jsx(i.code,{children:"object"})," - The current sort applied to the ",e.jsx(i.code,{children:"DataView"}),".",`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"name"})," - ",e.jsx(i.code,{children:"string"})," - The name of one of the ",e.jsx(i.code,{children:"DataView"}),"'s activeColumns containing the sortable data."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"dir"})," - ",e.jsx(i.code,{children:"string"}),' enum ["asc", "desc"] - The direction (ascending or descending), to sort the data.']}),`
`]}),`
`]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"sticky"})," - ",e.jsx(i.code,{children:"boolean"})," - Controls whether or not the DataView is constrained in size. If set to true, the DataView will scroll within a parent element's dimensions instead of being dynamically sized. When sticky is enabled, the column headers in list view and the bulk actions in grid view will both stick to the top of the DataView as it is scrolled."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"limit"})," - ",e.jsx(i.code,{children:"number"})," - The number of items the list should display per page."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"limitOptions"})," - ",e.jsx(i.code,{children:"array"})," of ",e.jsx(i.code,{children:"number"})," - default ",e.jsx(i.code,{children:"[25, 50, 100]"})," - When passed allows customizing the page-size options that is displayed to the user. You can utilize this option if you want to expose larger or smaller pagesize options."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"skip"})," - ",e.jsx(i.code,{children:"number"})," - The current number of rows being skipped by the user using ",e.jsx(i.code,{children:"0"})," based indexing. Given a ",e.jsx(i.code,{children:"limit"})," of ",e.jsx(i.code,{children:"10"})," So the first page should have a ",e.jsx(i.code,{children:"skip"})," of ",e.jsx(i.code,{children:"0"})," and the second page would have a skip of ",e.jsx(i.code,{children:"10"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"loading"})," - ",e.jsx(i.code,{children:"boolean"})," - Pass ",e.jsx(i.code,{children:"true"})," when your DataView is fetching data or doing some alteration which needs to lock the UI. While ",e.jsx(i.code,{children:"loading"})," is true, the majority of the UI elements in the DataView are locked to prevent race conditions. Once the data has been fetched you will want to prop down ",e.jsx(i.code,{children:"false"})," again."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"gridColumnsMap"})," - ",e.jsx(i.code,{children:"object"})," - Map which columns to use in the grid view. Columns available to map are ",e.jsx(i.code,{children:"primary"}),", ",e.jsx(i.code,{children:"secondary"})," and ",e.jsx(i.code,{children:"image"}),". In example ",e.jsx(i.code,{children:'gridColumnsMap : { primary : "title", secondary : "created", image : "image" }'}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"attrs"})," - ",e.jsx(i.code,{children:"React.HTMLAttributes<HTMLDivElement>"})," - An object of HTML attributes to be spread into the top level wrapping ",e.jsx(i.code,{children:"div"})," element."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onLimitChange"})," - ",e.jsx(i.code,{children:"function({ limit })"})," - A callback that will be executed with the new limit selected by the user. It is recommended that when the user changes the limit, your state alteration should also reset the ",e.jsx(i.code,{children:"skip"})," to ",e.jsx(i.code,{children:"0"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onSkipChange"})," - ",e.jsx(i.code,{children:"function({ skip })"})," - A callback that will be executed with the new skip selected by the user."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onSortChange"})," - ",e.jsx(i.code,{children:"function({ name, dir })"})," - A callback function which is invoked when the sort of the ",e.jsx(i.code,{children:"DataView"})," is changed. Returns a data object listing the chosen sort column and direction."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onDisplayChange"})," - ",e.jsx(i.code,{children:"function(display)"})," - A callback function which is invoked when a new view changes. Returns a data object detailing parameters of the new view."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onActiveFiltersChange"})," - ",e.jsx(i.code,{children:"function"})," - A callback function which is invoked when the active filters change. Will be passed a data object containing a list of active filters and a filter object."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onColumnsChange"})," - ",e.jsx(i.code,{children:"function(activeColumns[])"})," - A callback function which is invoked when the columns displayed in the ",e.jsx(i.code,{children:"DataView"})," change. Will be passed a data object containing the new list of active columns."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onReorder"})," - ",e.jsx(i.code,{children:"function"})," -  A callback function which will be executed when a row has ended being dragged and dropped. This callback will receive as an argument all the rows in their new order."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onCheckChange"})," - ",e.jsx(i.code,{children:"function"})," -  A callback function which is invoked when a row is selected, useful to tell the parent component which rows are checked."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onCheckAllPagesChange"})," - ",e.jsx(i.code,{children:"function(checkAllPages: boolean)"})," -  Callback used to update the state of the checkedAllPages prop."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onBack"})," - ",e.jsx(i.code,{children:"function"})," - optional - Callback used to go back to the previous screen / element / drawer. When passed a left arrow will render to the left of the title."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"currentView"})," - ",e.jsx(i.code,{children:"MosaicLabelValue"})," - optional - Represents the current view. The label will be displayed in the UI in the DataView heading area."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onViewList"})," - ",e.jsx(i.code,{children:"function"})," - optional - a handler to be invoked when the user wishes to show the list of available views."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onViewSave"})," - ",e.jsx(i.code,{children:"function"}),' - optional - a handler to be invoked when the user wishes to save changes to their current view. Providing this will cause a "Save View" dropdown containing, at the very least, the menu item "Overwrite Current View".']}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onViewSaveAs"})," - ",e.jsx(i.code,{children:"function"}),' - optional - a handler to be invoked when the user wishes to save their current DataView setup as a new view. Providing this will cause a "Save View" dropdown containing, at the very least, the menu item "Save as New View".']}),`
`]}),`
`,e.jsx(i.h2,{id:"feature---view-switcher",children:"Feature - View Switcher"}),`
`,e.jsx(i.p,{children:"Provide the user a way to switch between List/Grid views."}),`
`,e.jsxs(i.p,{children:["Required props - ",e.jsx(i.code,{children:"view"}),", ",e.jsx(i.code,{children:"views"}),", ",e.jsx(i.code,{children:"onViewChange"}),"."]}),`
`,e.jsx(i.h2,{id:"feature---limit-switcher",children:"Feature - Limit Switcher"}),`
`,e.jsx(i.p,{children:"Provide the user a way to change the number of rows to return per page."}),`
`,e.jsxs(i.p,{children:["Required props - ",e.jsx(i.code,{children:"limit"}),", ",e.jsx(i.code,{children:"limitOptions"}),", ",e.jsx(i.code,{children:"onLimitChange"}),"."]}),`
`,e.jsx(i.h2,{id:"feature---pager",children:"Feature - Pager"}),`
`,e.jsx(i.p,{children:"Provide the user a way to paginate through the result set."}),`
`,e.jsxs(i.p,{children:["Required props - ",e.jsx(i.code,{children:"limit"}),", ",e.jsx(i.code,{children:"skip"}),", ",e.jsx(i.code,{children:"count"}),", ",e.jsx(i.code,{children:"onSkipChange"}),"."]}),`
`,e.jsx(i.h2,{id:"feature---filters",children:"Feature - Filters"}),`
`,e.jsx(i.p,{children:"Provide the user a way to filter through the result set"}),`
`,e.jsxs(i.p,{children:["Required props - ",e.jsx(i.code,{children:"loading"}),", ",e.jsx(i.code,{children:"filter"}),", ",e.jsx(i.code,{children:"filters"}),", ",e.jsx(i.code,{children:"activeFilters"}),", ",e.jsx(i.code,{children:"onActiveFiltersChange"}),"."]}),`
`,e.jsx(i.h2,{id:"actions",children:"Actions"}),`
`,e.jsxs(i.p,{children:["Actions are the tool for giving your user a way to alter/interact with a specific row or rows within your list view. In ",e.jsx(i.code,{children:"sv-mosaic"})," there are 3 types of actions: bulkActions, primaryActions and additionalActions."]}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"primaryActions"})," - Buttons that display on each row, which are displayed to all users. You will want to use this for your frequently one or two most used actions. If you have too many primary actions then the UI can get bulky and likely some should be moved into ",e.jsx(i.code,{children:"additionalActions"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"additionalActions"}),' - Menu items which display underneath the "..." on each row in the list view.']}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"bulkActions"})," - When users utilize the checkboxes on the rows, it will bring up bulkActions so that they can perform them on all actions.",`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onClick"})," - Handler that will be invoked when using a standard multiple row bulkAction. If not specified, this action will not display during a bulkAction state."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.strong,{children:"onAllClick"})," - Handler that will be invoked when doing a bulkAction that goes across the entire recordset. If not specified this action will not display during a bulkAll state."]}),`
`]}),`
`]}),`
`]})]})}function We(n={}){const{wrapper:i}={...s(),...n.components};return i?e.jsx(i,{...n,children:e.jsx(t,{...n})}):t(n)}export{We as default};
