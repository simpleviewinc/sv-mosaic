import{j as e}from"./jsx-runtime-nGUw9YhZ.js";import{useMDXComponents as t}from"./index-3-_tf5dF.js";import{M as s}from"./index-CtarJ6Be.js";import{s as r}from"./LeftNav.stories-BYJIj6e0.js";import"./index-BP8_t0zE.js";import"./iframe-DZf3tb6o.js";import"../sb-preview/runtime.js";import"./index-BxmsGmlx.js";import"./extends-CF3RwP-h.js";import"./tslib.es6-CRos2fHm.js";import"./index-DXimoRZY.js";import"./inheritsLoose-CMy1E8oj.js";import"./toString-BjCnz-8e.js";import"./index-DJqTsaQd.js";import"./index-DrFu-skq.js";import"./Link-_R-HWamj.js";import"./styled-DFznwKy7.js";import"./emotion-unitless.esm-sScrWPmR.js";import"./createSvgIcon-mhwmaBA2.js";import"./Help-D2MrUeTb.js";import"./useMosaicTranslation-CZCb37QS.js";import"./useIsFocusVisible-De2ftVE9.js";import"./useMosaicSettings-BhwODcT2.js";import"./theme-DRtZtbPc.js";import"./generateUtilityClasses-DAcHHM0W.js";import"./createSvgIcon-CcHL1II5.js";import"./createSvgIcon-CPgMIgId.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-DvT1GKkC.js";import"./useId-DLncWxdO.js";import"./useControlled-im5M3O13.js";import"./Close-Dlpx7KpR.js";import"./ChevronRight-CSz705Z0.js";import"./Popper-CPbWUqAP.js";import"./useTheme-5hcycNQy.js";import"./TridentIcon-D3eXl2Te.js";import"./debounce-C_xMouBr.js";import"./isSymbol-CEVJpixJ.js";import"./useMediaQuery-CguehUMS.js";import"./getThemeProps-Cs15h2IA.js";function n(o){const i={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...t(),...o.components};return e.jsxs(e.Fragment,{children:[e.jsx(s,{of:r}),`
`,e.jsx(i.h1,{id:"leftnav",children:"LeftNav"}),`
`,e.jsxs(i.p,{children:[e.jsx(i.code,{children:"LeftNav"})," renders a left navigation drawer based on the items passed to it."]}),`
`,e.jsxs(i.p,{children:["The ",e.jsx(i.code,{children:"LeftNav"})," has 4 variants for it's display."]}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(i.code,{children:"full"})," - Displays a permanent left navigation fixed to the left side of the screen."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.code,{children:"icons_only"})," - Displays only the icons for the top-level items/groups to reduce space."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.code,{children:"hidden"})," - Navigation will display via a hamburger menu trigger from the top bar."]}),`
`,e.jsxs(i.li,{children:[e.jsx(i.code,{children:"mobile"})," - Hamburger triggered, but will utilize a sequential navigation style instead of hover/flyout optimized for smaller screen sizes."]}),`
`]}),`
`,e.jsx(i.h2,{id:"types-of-links",children:"Types of Links"}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["The default link, when clicked, will execute the primary ",e.jsx(i.code,{children:"onNav"})," function passed to ",e.jsx(i.code,{children:"LeftNav"}),". This is useful in most cases where you want standard single-page-app style navigation."]}),`
`,e.jsxs(i.li,{children:["If your app allows incoming links via URL, in example if I can visit ",e.jsx(i.a,{href:"https://your.app/nav_item/",rel:"nofollow",children:"https://your.app/nav_item/"})," and that will load /nav_item/ then it is recommended you add ",e.jsx(i.code,{children:'attrs.href : "/nav_item/"'})," to that ",e.jsx(i.code,{children:"LeftNavItemDef"}),". This provides a better UX because it allows users to open ",e.jsx(i.code,{children:"LeftNav"})," links in a new window or copy that link without visiting it."]}),`
`,e.jsxs(i.li,{children:["If you have links that are simply out-going links, you can pass ",e.jsx(i.code,{children:"attrs.href"})," and ",e.jsx(i.code,{children:"onNav : false"})," to disable the normal onNav processing. It will now just be a normal HTML anchor tag. If you want it to open in a new window pass ",e.jsx(i.code,{children:'attrs.target : "_blank"'}),"."]}),`
`,e.jsxs(i.li,{children:["There are rare cases where you may a specific nav item to have it's own ",e.jsx(i.code,{children:"onNav"})," handler to reduce complexity in your main ",e.jsx(i.code,{children:"onNav"})," handler. In this situation you can pass your own ",e.jsx(i.code,{children:"onNav"})," on the ",e.jsx(i.code,{children:"LeftNavItemDef"}),". When clicked, the system will automatically call the ",e.jsx(i.code,{children:"item.onNav"})," and then ",e.jsx(i.code,{children:"LeftNavProps.onClose"}),", this way you don't have to handle closing the navigation in your custom handler."]}),`
`]}),`
`,e.jsx(i.h2,{id:"important-things-to-do",children:"Important Things to Do"}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["Regardless of ",e.jsx(i.code,{children:"variant"})," active the ",e.jsx(i.code,{children:"LeftNav"})," should be placed in the DOM tree in a position that fixes it to the left side of the screen. When in ",e.jsx(i.code,{children:"full"})," or ",e.jsx(i.code,{children:"icons_only"})," it will fill it's container. You do not need to move it to a different location for ",e.jsx(i.code,{children:"hidden"})," or ",e.jsx(i.code,{children:"mobile"}),", the material-ui drawer system will handle this for you."]}),`
`,e.jsxs(i.li,{children:["The user has the capability to choose between ",e.jsx(i.code,{children:"full"}),", ",e.jsx(i.code,{children:"icons_only"})," and ",e.jsx(i.code,{children:"hidden"})," via a toggle in the navigation itself. Your application should determine when to use the user's chosen setting vs ",e.jsx(i.code,{children:"mobile"})," based on your own criteria. In the test application we use the criteria that the width is smaller than ",e.jsx(i.code,{children:"1024"}),". When your application utilizes the mobile variant should depend on when the main area of your product becomes too cramped to have a permanent navigation. This might be a different breakpoint for different projects."]}),`
`,e.jsxs(i.li,{children:["When ",e.jsx(i.code,{children:"mobile"})," variant engages you should not change the user's chosen behavior, instead you should override it. In example, if the user's chosen setting is ",e.jsx(i.code,{children:"icons_only"})," and the user shrinks their browser to mobile size, if they make it larger again it should return to ",e.jsx(i.code,{children:"icons_only"}),"."]}),`
`,e.jsxs(i.li,{children:["It is recommended you persist the user's chosen ",e.jsx(i.code,{children:"variant"}),". This can be via a cookie, localStorage, or account-based mechanics."]}),`
`,e.jsxs(i.li,{children:["In ",e.jsx(i.code,{children:"mobile"})," and ",e.jsx(i.code,{children:"hidden"})," variants, you will need a hamburger in your top bar to trigger the opening of the navigation. This should not be present in the ",e.jsx(i.code,{children:"full"})," or ",e.jsx(i.code,{children:"icons_only"})," variants."]}),`
`,e.jsxs(i.li,{children:["In your ",e.jsx(i.code,{children:"onVariantChange"})," you will want to toggle the ",e.jsx(i.code,{children:"open"})," state to false. This ensures that if a user alters the variant, it doesn't leave the nav open."]}),`
`,e.jsxs(i.li,{children:["In your ",e.jsx(i.code,{children:"onNav"})," you will want to toggle the ",e.jsx(i.code,{children:"open"})," state to false. If you are doing dynamic page changes you will want to scroll to the top of the content div."]}),`
`,e.jsxs(i.li,{children:["If your app is doing dynamic page changes and you are supporting browser back mechanics, you will need to ensure you pass the proper ",e.jsx(i.code,{children:"active"})," value into the LeftNav component. On a back you will likely want to also set ",e.jsx(i.code,{children:"open"})," to false."]}),`
`,e.jsxs(i.li,{children:["In order to ensure the ",e.jsx(i.code,{children:"LeftNav"})," works properly on iOS12 and older devices you will need to have a noop ",e.jsx(i.code,{children:"onClick"})," on the root element of your application. Without an empty function on your root div, the click away listener will not function properly."]}),`
`]}),`
`,e.jsx(i.h2,{id:"props",children:"Props"}),`
`,e.jsxs(i.p,{children:[e.jsx(i.code,{children:"interface LeftNavProps"})," - ",e.jsx(i.a,{href:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/LeftNav/LeftNavTypes.ts",rel:"nofollow",children:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/src/components/LeftNav/LeftNavTypes.ts"})]})]})}function B(o={}){const{wrapper:i}={...t(),...o.components};return i?e.jsx(i,{...o,children:e.jsx(n,{...o})}):n(o)}export{B as default};
