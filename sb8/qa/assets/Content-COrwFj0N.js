import{j as t}from"./jsx-runtime-EKYJJIwR.js";import{useMDXComponents as r}from"./index-BwDDMXeo.js";import{M as i,C as s}from"./index-D7EMJGzp.js";import{s as l,P as a}from"./Content.stories-DIBCDSso.js";import"./index-D0AnReJb.js";import"./iframe-CrhhyW09.js";import"../sb-preview/runtime.js";import"./index-Bqzh3Cp6.js";import"./index-SI8xS9YR.js";import"./tslib.es6-CvpyDmub.js";import"./index-Cu4lwwaE.js";import"./extends-CF3RwP-h.js";import"./inheritsLoose-CMy1E8oj.js";import"./toString-DoexKoos.js";import"./_baseForOwn-YgwlavHx.js";import"./index-QVqIEGA1.js";import"./_arrayIncludesWith-XJRwRZaz.js";import"./index-DrFu-skq.js";import"./column_transforms-D1Szp9Vv.js";import"./index-BGyeqrbu.js";import"./styled-components.browser.esm-8X0uN6v9.js";import"./sizes-DkIXWPpc.js";import"./ExpandMore-Ca3pe8z0.js";import"./identifier-DOqdnZ6L.js";import"./createSvgIcon-DDyBApXB.js";import"./createSvgIcon-C3PpPknf.js";import"./generateUtilityClasses-BL8vvUJw.js";import"./createChainedFunction-BO_9K8Jh.js";import"./ownerWindow-DvT1GKkC.js";import"./ButtonBase-O4ZQd6U4.js";import"./useId-BgzzDjMB.js";import"./useControlled-DuXZYv4M.js";import"./MosaicContext-Y61KIvFP.js";import"./FormFieldText.styled-e8Bs0syX.js";import"./formControlState-BI4toe_X.js";import"./Popper-CeYJ7yNz.js";import"./useTheme-CJVJa3gz.js";import"./useThemeWithoutDefault-BQF-0HLi.js";import"./Button-CyFYeSR6.js";import"./index-CYsLg4TE.js";import"./useToggle-CTbnrs6g.js";import"./testIds-oQNwr1rf.js";import"./TitleWrapper-DK3mQSoI.js";import"./containerQuery-CYj0-5X2.js";import"./ChevronLeft-Bjv82Anv.js";import"./Typography-CZQzWHyE.js";import"./DisplayText-DLjAy6kH.js";import"./ButtonRow-B33uQ4OQ.js";import"./DataViewFilterDropdownButtons-B-4fHIWu.js";import"./StyledPopperPaper-BODJ-ail.js";import"./index-DW-iQxit.js";import"./Chip-CuRU8A0j.js";import"./DataViewPrimaryFilter.styled-EiL82tvk.js";import"./Badge-D14GCFVi.js";import"./Text-BjwqtcAz.js";import"./PickerPanel-BjpwXlnw.js";import"./PageHeader-t08h7SxQ.js";import"./Spinner-BATOmOoB.js";import"./CheckboxList-Dtr7xjiR.js";import"./Checkbox-Be3Yhveb.js";import"./StyledOptionFormControl-Br1jmfxi.js";import"./MoreVert-BAJenQd7.js";import"./throws-DLZ75Q5e.js";import"./formats-CMvQHWsT.js";import"./Snackbar-BY140rqK.js";import"./Close-DizofMnI.js";import"./ClickAwayListener-Cp7Ry44a.js";import"./ChipList-DjriK11X.js";import"./stable-BFc8HSVh.js";import"./RadioButton-DplP-WlB.js";import"./Toggle-BL_WBRmO.js";import"./Dialog-zScg2qCO.js";import"./ThemeProvider-CFABLTDy.js";import"./SideNav-CFjdJbjv.js";import"./Image-ZO9EpWKf.js";import"./Edit-Bk4AvtQF.js";import"./styled-Cb9FMILg.js";import"./emotion-is-prop-valid.cjs.default-BrZTFlsY.js";import"./createSvgIcon-DtczVsqP.js";import"./Typography-CW8rULec.js";function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...r(),...e.components};return t.jsxs(t.Fragment,{children:[t.jsx(i,{of:l}),`
`,t.jsx(n.h1,{id:"content",children:"Content"}),`
`,t.jsxs(n.p,{children:["The ",t.jsx(n.code,{children:"Content"})," helps to show the primary information from each specific record, with the possibility to add new subsections separate from the main form."]}),`
`,t.jsx(n.h2,{id:"props",children:"Props"}),`
`,t.jsx(n.p,{children:t.jsx(n.a,{href:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/containers/mosaic/src/components/Content/ContentTypes.ts",rel:"nofollow",children:"https://github.com/simpleviewinc/sv-mosaic/blob/develop/containers/mosaic/src/components/Content/ContentTypes.ts"})}),`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"fields"})," - ",t.jsx(n.code,{children:"array"})," of ",t.jsx(n.code,{children:"object"})," required - List of the definitions of the fields that will be render.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"name"})," - ",t.jsx(n.code,{children:"string"})," required - The name of the field is used to check if is valid compared with the names on the sections."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"label"})," - ",t.jsx(n.code,{children:"string"})," required - Label that is render above the component generated by the transforms functions."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"transforms"})," - ",t.jsx(n.code,{children:"(args: DataViewColumnTransformArgs<T>): ReactNode"})," optional - Functions which will receive raw data that will be use to render a component.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"DataViewColumnTransformArgs"})," - ",t.jsx(n.code,{children:"string"})," optional.",`
`,t.jsxs(n.ul,{children:[`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"data"})," - ",t.jsx(n.code,{children:"T"})," required - The data that the getValues function is going to resolve. This is value is used to generate the returned JSX element, it could be seen as a prop."]}),`
`]}),`
`]}),`
`]}),`
`]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"show"})," - ",t.jsx(n.a,{href:"/docs/components-form-readme--page#MosaicToggle-t-type",children:t.jsx(n.code,{children:"MosaicToggle"})})," optional - No params are given to the show callback"]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"column"})," - ",t.jsx(n.code,{children:"string"})," optional - If a column is given then it will be used as the name hence, defaults to name."]}),`
`]}),`
`]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"data"})," - ",t.jsx(n.code,{children:"MosaicObject"})," required - Data that will be used by the transform function of each field to generate the corresponding JSX element."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"sections"})," - ",t.jsx(n.code,{children:"string[][]"})," optional - Defines the position of each field. It is based in columns with a maximun allowed of two, if no sections are passed the content will be render in one column. Look at the following example to see how it is declared."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"title"})," - ",t.jsx(n.code,{children:"string"})," required - Name of the section or subsection."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"buttons"})," - ",t.jsx(n.code,{children:"ButtonProps[]"})," optional - Array of buttons that will be display on the top-right corner of the component."]}),`
`,t.jsxs(n.li,{children:[t.jsx(n.strong,{children:"variant"})," - ",t.jsx(n.code,{children:'"standard" | "card"'}),' optional - Variant of the component defines what styles should render. If "card" is passed, content component looks like a card component']}),`
`]}),`
`,t.jsx(n.h3,{id:"example",children:"Example"}),`
`,t.jsx(n.pre,{children:t.jsx(n.code,{className:"language-ts",children:`import {
	transform_chips,
	transform_colorPicker,
	transform_dateFormat,
	transform_thumbnail,
	transform_boolean
} from "#mosaic/transforms";

const fieldDef = [
	{
		name: "chips",
		label: "Chips using transform_chips()",
		transforms: [transform_chips()],
		column: "tags",
		show: [true, () => true]
	},
	{
		name: "toggle",
		label: "Toggle using transform_boolean()",
		transforms: [transform_boolean()],
	},
	{
		name: "date",
		label: "Date using transform_dateFormat()",
		transforms: [transform_dateFormat()],
	},
	{
		name: "color",
		label: "Color using transfomr_colorPicker()",
		transforms: [transform_colorPicker()],
		column: "colorPicker"
	},
	{
		name: "thumbnail",
		label: "Thumbnail using transform_thumbnail()",
		transforms: [transform_thumbnail({ width: 150, height: 150 })],
	},
];

// Sections with two columns defined
const sections = [
	[["tags"], ["colorPicker"]],
	[["toggle"], ["date"]],
	[["thumbnail"]],
];

// Values resolved by the getValues function.
const values = {
	tags: [
		{
			label: "Chip 1",
			value: "chip-1",
		},
		{
			label: "Chip 2",
			value: "chip-2",
		},
		{
			label: "Chip 3",
			value: "chip-3",
		},
		{
			label: "Chip 4",
			value: "chip-4",
		},
	],
	date: new Date("December 17, 1995 03:24:00"),
	toggle: false,
	colorPicker: "#a8001791",
	thumbnail: "https://res.cloudinary.com/simpleview/image/upload/v1542821844/clients/grandrapids/_OD_0354_c78fbb66-c75a-4804-9430-9af38ed8e9d5.jpg"
};

const ContentExample = (): ReactElement => {
	/**
	 * Simulates a DB calls that fetch the values for
	 * each field.
	 * @returns the resolved values
	 */
	const getValues = async (): Promise<MosaicObject> => {
		return new Promise((resolve) => {
			setTimeout(() => {
					resolve(values);
			}, 500);
		});
	};

	return (
		<Content
			title={title}
			getValues={getValues}
			fieldDef={fieldDef}
			sections={sections}
			variant={"card"}
			onEdit={() => {/**Edit functionality*/}}
			onAdd={() => {/**Add functionality*/}}
		/>
	);
};
`})}),`
`,t.jsx(n.h2,{id:"playground",children:"Playground"}),`
`,t.jsx(s,{of:a})]})}function Xt(e={}){const{wrapper:n}={...r(),...e.components};return n?t.jsx(n,{...e,children:t.jsx(o,{...e})}):o(e)}export{Xt as default};
